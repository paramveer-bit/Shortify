name: CI/CD Pipeline

on:
  push:
    branches:
      - main   # Trigger CI/CD on push to the main branch
  pull_request:
    branches:
      - main   # Trigger CI/CD on pull requests to the main branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Store Docker credentials as GitHub secrets
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build and push Go backend image
    - name: Build and push Go backend image
      run: |
        docker build -t myusername/backend:latest ./backend
        docker push myusername/backend:latest

    # Step 5: Build and push Next.js frontend image
    - name: Build and push Next.js frontend image
      run: |
        docker build -t myusername/frontend:latest ./frontend
        docker push myusername/frontend:latest

    # Step 6: Deploy to your server (Optional, e.g., deploy to EC2)
    - name: Deploy to EC2
      env:
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USER }}
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      run: |
        # Use SSH to connect to the EC2 instance and pull the latest Docker images
        echo "$PRIVATE_KEY" | ssh -o StrictHostKeyChecking=no -i /dev/stdin $USER@$HOST << 'EOF'
          # Pull latest images for both frontend and backend
          docker pull myusername/backend:latest
          docker pull myusername/frontend:latest

          # Restart the Docker containers (assuming you have a running docker-compose setup)
          docker-compose down
          docker-compose up -d
        EOF
